package io.manurasahs.deltavault.port.adapter.clientrest.resources.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import org.springframework.lang.Nullable;
import java.util.NoSuchElementException;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * An issue detected during input validation.  &#x60;status&#x60; is usually not present. &#x60;href&#x60;, if present, refers to documentation of the issue type. Additional properties specific to the issue type may be present. 
 */

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
public class InputValidationIssue {

  private URI type = URI.create("about:blank");

  private @Nullable URI href;

  private @Nullable String title;

  private @Nullable Integer status;

  private @Nullable String detail;

  private @Nullable URI instance;

  /**
   * The location of the invalid input
   */
  public enum InEnum {
    BODY("body"),
    
    HEADER("header"),
    
    PATH("path"),
    
    QUERY("query");

    private final String value;

    InEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  private @Nullable InEnum in;

  private @Nullable String name;

  private JsonNullable<Object> value = JsonNullable.<Object>undefined();

  public InputValidationIssue type(URI type) {
    this.type = type;
    return this;
  }

  /**
   * An absolute URI that identifies the problem type
   * @return type
   */
  @Valid 
  @JsonProperty("type")
  public URI getType() {
    return type;
  }

  public void setType(URI type) {
    this.type = type;
  }

  public InputValidationIssue href(@Nullable URI href) {
    this.href = href;
    return this;
  }

  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   * @return href
   */
  @Valid 
  @JsonProperty("href")
  public @Nullable URI getHref() {
    return href;
  }

  public void setHref(@Nullable URI href) {
    this.href = href;
  }

  public InputValidationIssue title(@Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   * @return title
   */
  
  @JsonProperty("title")
  public @Nullable String getTitle() {
    return title;
  }

  public void setTitle(@Nullable String title) {
    this.title = title;
  }

  public InputValidationIssue status(@Nullable Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   * minimum: 400
   * maximum: 600
   * @return status
   */
  @Min(400) @Max(600) 
  @JsonProperty("status")
  public @Nullable Integer getStatus() {
    return status;
  }

  public void setStatus(@Nullable Integer status) {
    this.status = status;
  }

  public InputValidationIssue detail(@Nullable String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human-readable explanation specific to this occurrence of the problem
   * @return detail
   */
  
  @JsonProperty("detail")
  public @Nullable String getDetail() {
    return detail;
  }

  public void setDetail(@Nullable String detail) {
    this.detail = detail;
  }

  public InputValidationIssue instance(@Nullable URI instance) {
    this.instance = instance;
    return this;
  }

  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   * @return instance
   */
  @Valid 
  @JsonProperty("instance")
  public @Nullable URI getInstance() {
    return instance;
  }

  public void setInstance(@Nullable URI instance) {
    this.instance = instance;
  }

  public InputValidationIssue in(@Nullable InEnum in) {
    this.in = in;
    return this;
  }

  /**
   * The location of the invalid input
   * @return in
   */
  
  @JsonProperty("in")
  public @Nullable InEnum getIn() {
    return in;
  }

  public void setIn(@Nullable InEnum in) {
    this.in = in;
  }

  public InputValidationIssue name(@Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the invalid input
   * @return name
   */
  
  @JsonProperty("name")
  public @Nullable String getName() {
    return name;
  }

  public void setName(@Nullable String name) {
    this.name = name;
  }

  public InputValidationIssue value(Object value) {
    this.value = JsonNullable.of(value);
    return this;
  }

  /**
   * The value of the erroneous input
   * @return value
   */
  
  @JsonProperty("value")
  public JsonNullable<Object> getValue() {
    return value;
  }

  public void setValue(JsonNullable<Object> value) {
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputValidationIssue inputValidationIssue = (InputValidationIssue) o;
    return Objects.equals(this.type, inputValidationIssue.type) &&
        Objects.equals(this.href, inputValidationIssue.href) &&
        Objects.equals(this.title, inputValidationIssue.title) &&
        Objects.equals(this.status, inputValidationIssue.status) &&
        Objects.equals(this.detail, inputValidationIssue.detail) &&
        Objects.equals(this.instance, inputValidationIssue.instance) &&
        Objects.equals(this.in, inputValidationIssue.in) &&
        Objects.equals(this.name, inputValidationIssue.name) &&
        equalsNullable(this.value, inputValidationIssue.value);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, title, status, detail, instance, in, name, hashCodeNullable(value));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputValidationIssue {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

