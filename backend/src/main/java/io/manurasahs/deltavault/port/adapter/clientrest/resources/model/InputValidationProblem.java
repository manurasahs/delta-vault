package io.manurasahs.deltavault.port.adapter.clientrest.resources.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.manurasahs.deltavault.port.adapter.clientrest.resources.model.InputValidationIssue;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.springframework.lang.Nullable;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * InputValidationProblem
 */

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.14.0")
public class InputValidationProblem {

  private URI type = URI.create("about:blank");

  private @Nullable URI href;

  private @Nullable String title;

  private @Nullable Integer status;

  private @Nullable String detail;

  private @Nullable URI instance;

  @Valid
  private List<@Valid InputValidationIssue> issues = new ArrayList<>();

  public InputValidationProblem type(URI type) {
    this.type = type;
    return this;
  }

  /**
   * An absolute URI that identifies the problem type
   * @return type
   */
  @Valid 
  @JsonProperty("type")
  public URI getType() {
    return type;
  }

  public void setType(URI type) {
    this.type = type;
  }

  public InputValidationProblem href(@Nullable URI href) {
    this.href = href;
    return this;
  }

  /**
   * An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
   * @return href
   */
  @Valid 
  @JsonProperty("href")
  public @Nullable URI getHref() {
    return href;
  }

  public void setHref(@Nullable URI href) {
    this.href = href;
  }

  public InputValidationProblem title(@Nullable String title) {
    this.title = title;
    return this;
  }

  /**
   * A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
   * @return title
   */
  
  @JsonProperty("title")
  public @Nullable String getTitle() {
    return title;
  }

  public void setTitle(@Nullable String title) {
    this.title = title;
  }

  public InputValidationProblem status(@Nullable Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code generated by the origin server for this occurrence of the problem.
   * minimum: 400
   * maximum: 600
   * @return status
   */
  @Min(400) @Max(600) 
  @JsonProperty("status")
  public @Nullable Integer getStatus() {
    return status;
  }

  public void setStatus(@Nullable Integer status) {
    this.status = status;
  }

  public InputValidationProblem detail(@Nullable String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * A human-readable explanation specific to this occurrence of the problem
   * @return detail
   */
  
  @JsonProperty("detail")
  public @Nullable String getDetail() {
    return detail;
  }

  public void setDetail(@Nullable String detail) {
    this.detail = detail;
  }

  public InputValidationProblem instance(@Nullable URI instance) {
    this.instance = instance;
    return this;
  }

  /**
   * An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
   * @return instance
   */
  @Valid 
  @JsonProperty("instance")
  public @Nullable URI getInstance() {
    return instance;
  }

  public void setInstance(@Nullable URI instance) {
    this.instance = instance;
  }

  public InputValidationProblem issues(List<@Valid InputValidationIssue> issues) {
    this.issues = issues;
    return this;
  }

  public InputValidationProblem addIssuesItem(InputValidationIssue issuesItem) {
    if (this.issues == null) {
      this.issues = new ArrayList<>();
    }
    this.issues.add(issuesItem);
    return this;
  }

  /**
   * Get issues
   * @return issues
   */
  @Valid 
  @JsonProperty("issues")
  public List<@Valid InputValidationIssue> getIssues() {
    return issues;
  }

  public void setIssues(List<@Valid InputValidationIssue> issues) {
    this.issues = issues;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputValidationProblem inputValidationProblem = (InputValidationProblem) o;
    return Objects.equals(this.type, inputValidationProblem.type) &&
        Objects.equals(this.href, inputValidationProblem.href) &&
        Objects.equals(this.title, inputValidationProblem.title) &&
        Objects.equals(this.status, inputValidationProblem.status) &&
        Objects.equals(this.detail, inputValidationProblem.detail) &&
        Objects.equals(this.instance, inputValidationProblem.instance) &&
        Objects.equals(this.issues, inputValidationProblem.issues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, href, title, status, detail, instance, issues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputValidationProblem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    issues: ").append(toIndentedString(issues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

